"""_share_request_purpose

Revision ID: 72b8a90b6ee8
Revises: 509997f0a51e
Create Date: 2023-06-05 12:28:56.221364

"""
from alembic import op
from sqlalchemy import orm, Column, String, and_
from sqlalchemy.ext.declarative import declarative_base

from dataall.db import api, models

# revision identifiers, used by Alembic.
revision = '72b8a90b6ee8'
down_revision = '509997f0a51e'
branch_labels = None
depends_on = None

Base = declarative_base()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('share_object', Column('requestPurpose', String(), nullable=True))
    op.add_column('share_object', Column('rejectPurpose', String(), nullable=True))

    # ### Remove SUBMIT_SHARE_OBJECT Permissions from Approvers
    try:
        bind = op.get_bind()
        session = orm.Session(bind=bind)
        print('Getting SUBMIT_SHARE_OBJECT Permission...')
        permission: models.Permission = api.Permission.find_permission_by_name(
            session, "SUBMIT_SHARE_OBJECT", "RESOURCE"
        )
        print('Getting all Share Objects...')
        shares: [modelsShareObject] = session.query(models.ShareObject).all()
        for share in shares:
            share_uri = share.shareUri
            dataset = api.Dataset.get_dataset_by_uri(session, share.datasetUri)
            dataset_steward = dataset.stewards

            # Check if Owner is different then Steward and Env Admin
            # IF different add Approver remove Requestor permissions
            # IF ENv Admin unique then 
            policy = api.ResourcePolicy.has_group_resource_permission(
                session,
                group_uri=dataset_steward,
                permission_name="SUBMIT_SHARE_OBJECT",
                resource_uri=share_uri,
            )
            if policy:
                resource_policy_perm = (
                    session.query(models.ResourcePolicyPermission)
                    .filter(
                        and_(
                            models.ResourcePolicyPermission.sid == policy.sid,
                            models.ResourcePolicyPermission.permissionUri == permission.permissionUri
                        )
                    )
                    .first()
                )
                session.delete(resource_policy_perm)
                session.commit()
                print(f"Removed SUBMIT_SHARE_OBJECT Permission from: {dataset_steward}")
    except Exception as e:
        print(e)
        print(f'Failed to update share object approver permissions due to: {e}')
        raise e
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('share_object', 'requestPurpose')
    op.drop_column('share_object', 'rejectPurpose')
    # ### end Alembic commands ###
