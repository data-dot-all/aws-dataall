"""_alembic_sync

Revision ID: fd2a890159e9
Revises: f6cd4ba7dd8d
Create Date: 2024-02-01 15:51:14.325249

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'fd2a890159e9'
down_revision = 'f6cd4ba7dd8d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user')
    op.drop_table('notification')
    op.drop_table('worksheet_query_result')
    op.drop_table('item_tags')
    op.drop_table('redshiftcluster_datasettable')
    op.drop_table('dataset_table_profiling_job')
    op.drop_table('dashboardshare')
    op.drop_table('datapipeline')
    op.drop_table('dashboard')
    op.drop_table('vote')
    op.drop_table('term_link')
    op.drop_table('group_member')
    op.drop_table('datapipelineenvironments')
    op.drop_table('redshiftcluster_dataset')
    op.drop_table('tag')
    op.drop_table('redshiftcluster')
    op.drop_table('glossary_node')
    op.drop_table('dataset_quality_rule')
    op.drop_table('feed_message')
    op.drop_table('worksheet')
    op.alter_column('dataset_bucket', 'partition',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_constraint('dataset_bucket_datasetUri_fkey', 'dataset_bucket', type_='foreignkey')
    op.alter_column('environment_parameters', 'paramValue',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_foreign_key(None, 'environment_parameters', 'environment', ['environmentUri'], ['environmentUri'])
    op.alter_column('sagemaker_studio_domain', 'environmentUri',
               existing_type=sa.VARCHAR(),
               nullable=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('sagemaker_studio_domain', 'environmentUri',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_constraint(None, 'environment_parameters', type_='foreignkey')
    op.alter_column('environment_parameters', 'paramValue',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.create_foreign_key('dataset_bucket_datasetUri_fkey', 'dataset_bucket', 'dataset', ['datasetUri'], ['datasetUri'])
    op.alter_column('dataset_bucket', 'partition',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.create_table('worksheet',
    sa.Column('label', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('owner', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('worksheetUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('SamlAdminGroupName', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('sqlBody', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('chartConfig', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('lastSavedAthenaQueryIdForQuery', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('lastSavedAthenaQueryIdForChart', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('worksheetUri', name='worksheet_pkey')
    )
    op.create_table('feed_message',
    sa.Column('feedMessageUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('creator', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('targetUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('targetType', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('feedMessageUri', name='feed_message_pkey')
    )
    op.create_table('dataset_quality_rule',
    sa.Column('label', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('owner', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('datasetUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('ruleUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('query', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('logs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('ruleUri', name='dataset_quality_rule_pkey')
    )
    op.create_table('glossary_node',
    sa.Column('nodeUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('parentUri', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('nodeType', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('path', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('label', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('readme', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('owner', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('admin', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('nodeUri', name='glossary_node_pkey')
    )
    op.create_table('redshiftcluster',
    sa.Column('label', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('owner', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('environmentUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('organizationUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('clusterUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('clusterArn', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('clusterName', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('databaseName', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('databaseUser', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('masterUsername', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('masterDatabaseName', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('nodeType', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('numberOfNodes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('region', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('AwsAccountId', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('kmsAlias', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('vpc', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('subnetGroupName', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('subnetIds', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('securityGroupIds', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('CFNStackName', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('CFNStackStatus', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('CFNStackArn', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('IAMRoles', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('endpoint', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('port', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('datahubSecret', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('masterSecret', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('external_schema_created', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('SamlGroupName', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('imported', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['environmentUri'], ['environment.environmentUri'], name='fk_redshiftcluster_env_uri'),
    sa.PrimaryKeyConstraint('clusterUri', name='redshiftcluster_pkey')
    )
    op.create_table('tag',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tag', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('owner', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tag_pkey')
    )
    op.create_table('redshiftcluster_dataset',
    sa.Column('clusterUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('datasetUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('datasetCopyEnabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('clusterUri', 'datasetUri', name='redshiftcluster_dataset_pkey')
    )
    op.create_table('datapipelineenvironments',
    sa.Column('label', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('owner', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('envPipelineUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('environmentUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('environmentLabel', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('pipelineUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('pipelineLabel', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('stage', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('region', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('AwsAccountId', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('samlGroupName', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('envPipelineUri', name='datapipelineenvironments_pkey')
    )
    op.create_table('group_member',
    sa.Column('groupUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('userName', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('userRoleInGroup', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('groupUri', 'userName', name='group_member_pkey')
    )
    op.create_table('term_link',
    sa.Column('linkUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('nodeUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('targetUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('targetType', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('approvedBySteward', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('approvedByOwner', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('owner', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('linkUri', name='term_link_pkey')
    )
    op.create_table('vote',
    sa.Column('voteUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('targetUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('targetType', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('upvote', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('voteUri', name='vote_pkey')
    )
    op.create_table('dashboard',
    sa.Column('label', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('owner', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('environmentUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('organizationUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('dashboardUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('region', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('AwsAccountId', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('namespace', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('DashboardId', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('SamlGroupName', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['environmentUri'], ['environment.environmentUri'], name='fk_dashboard_env_uri'),
    sa.PrimaryKeyConstraint('dashboardUri', name='dashboard_pkey')
    )
    op.create_table('datapipeline',
    sa.Column('label', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('owner', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('environmentUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('DataPipelineUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('region', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('AwsAccountId', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('SamlGroupName', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('repo', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('devStrategy', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('template', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['environmentUri'], ['environment.environmentUri'], name='fk_datapipeline_env_uri'),
    sa.PrimaryKeyConstraint('DataPipelineUri', name='sqlpipeline_pkey')
    )
    op.create_table('dashboardshare',
    sa.Column('shareUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('dashboardUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('SamlGroupName', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('owner', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('shareUri', 'dashboardUri', name='dashboardshare_pkey')
    )
    op.create_table('dataset_table_profiling_job',
    sa.Column('label', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('owner', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('tableUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('jobUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('AWSAccountId', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('RunCommandId', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('GlueDatabaseName', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('GlueTableName', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('region', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('jobUri', name='dataset_table_profiling_job_pkey')
    )
    op.create_table('redshiftcluster_datasettable',
    sa.Column('clusterUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('datasetUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tableUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('shareUri', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('schema', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('databaseName', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('dataLocation', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('clusterUri', 'datasetUri', 'tableUri', name='redshiftcluster_datasettable_pkey')
    )
    op.create_table('item_tags',
    sa.Column('tagid', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('itemid', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('tagid', 'itemid', name='item_tags_pkey')
    )
    op.create_table('worksheet_query_result',
    sa.Column('worksheetUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('AthenaQueryId', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('queryType', postgresql.ENUM('chart', 'data', name='querytype'), autoincrement=False, nullable=False),
    sa.Column('sqlBody', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('AwsAccountId', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('region', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('OutputLocation', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('error', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ElapsedTimeInMs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('DataScannedInBytes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('AthenaQueryId', name='worksheet_query_result_pkey')
    )
    op.create_table('notification',
    sa.Column('notificationUri', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('message', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('recipient', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_read', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('target_uri', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('notificationUri', name='notification_pkey')
    )
    op.create_table('user',
    sa.Column('userId', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('userName', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('userId', name='user_pkey')
    )
    # ### end Alembic commands ###
