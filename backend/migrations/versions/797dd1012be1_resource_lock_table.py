"""resource_lock_table

Revision ID: 797dd1012be1
Revises: 18da23d3ba44
Create Date: 2024-06-17 19:06:51.569471

"""

from alembic import op
from sqlalchemy import orm, Column, String, Boolean, ForeignKey
import sqlalchemy as sa
from typing import Optional
from sqlalchemy.ext.declarative import declarative_base
from dataall.base.db import utils

# revision identifiers, used by Alembic.
revision = '797dd1012be1'
down_revision = '18da23d3ba44'
branch_labels = None
depends_on = None

Base = declarative_base()


class ResourceLock(Base):
    __tablename__ = 'resource_lock'

    resourceUri = Column(String, nullable=False, primary_key=True)
    resourceType = Column(String, nullable=False, primary_key=True)
    isLocked = Column(Boolean, default=False)
    acquiredByUri = Column(String, nullable=True)
    acquiredByType = Column(String, nullable=True)

    def __init__(
        self,
        resourceUri: str,
        resourceType: str,
        isLocked: bool = False,
        acquiredByUri: Optional[str] = None,
        acquiredByType: Optional[str] = None,
    ):
        self.resourceUri = resourceUri
        self.resourceType = resourceType
        self.isLocked = isLocked
        self.acquiredByUri = acquiredByUri
        self.acquiredByType = acquiredByType


class DatasetBase(Base):
    __tablename__ = 'dataset'
    environmentUri = Column(String, ForeignKey('environment.environmentUri'), nullable=False)
    organizationUri = Column(String, nullable=False)
    datasetUri = Column(String, primary_key=True, default=utils.uuid('dataset'))


class S3Dataset(DatasetBase):
    __tablename__ = 's3_dataset'
    datasetUri = Column(String, ForeignKey('dataset.datasetUri'), primary_key=True)


class EnvironmentGroup(Base):
    __tablename__ = 'environment_group_permission'
    groupUri = Column(String, primary_key=True)
    environmentUri = Column(String, primary_key=True)


class ConsumptionRole(Base):
    __tablename__ = 'consumptionrole'
    consumptionRoleUri = Column(String, primary_key=True, default=utils.uuid('group'))


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop Foregin Key
    op.drop_constraint('dataset_lock_datasetUri_fkey', 'dataset_lock', type_='foreignkey')

    # Rename Table to Resource Lock
    op.rename_table('dataset_lock', 'resource_lock')

    # Rename Columns
    op.alter_column(
        'resource_lock',
        'datasetUri',
        nullable=False,
        new_column_name='resourceUri',
        existing_type=String,
        primary_key=True,
    )
    op.alter_column(
        'resource_lock',
        'acquiredBy',
        nullable=True,
        new_column_name='acquiredByUri',
        existing_type=String,
    )

    # Add New Columns
    op.add_column('resource_lock', sa.Column('resourceType', sa.String()))
    op.add_column('resource_lock', sa.Column('acquiredByType', sa.String(), nullable=True))

    session = orm.Session(bind=op.get_bind())

    # Backfill Dataset Locks
    session.query(ResourceLock).update(
        {
            ResourceLock.resourceType: S3Dataset.__tablename__,
        }
    )
    session.commit()

    # Add resourceType as primary key after backfilling
    op.alter_column('resource_lock', 'resourceType', primary_key=True)

    # Backfill Locks for Env Groups
    env_groups = session.query(EnvironmentGroup).all()
    for group in env_groups:
        lock = ResourceLock(
            resourceUri=f'{group.groupUri}-{group.environmentUri}',
            resourceType=EnvironmentGroup.__tablename__,
        )
        session.add(lock)
        session.commit()

    # Backfill Locks for Consumption Roles
    consumption_roles = session.query(ConsumptionRole).all()
    for role in consumption_roles:
        lock = ResourceLock(resourceUri=role.consumptionRoleUri, resourceType=ConsumptionRole.__tablename__)
        session.add(lock)
        session.commit()
    # ### end Alembic commands ###


def downgrade():
    session = orm.Session(bind=op.get_bind())
    # Deleting Locks for Env Groups
    env_groups = session.query(EnvironmentGroup).all()
    for group in env_groups:
        lock = session.query(ResourceLock).get(
            (f'{group.groupUri}-{group.environmentUri}', EnvironmentGroup.__tablename__)
        )
        if lock:
            session.delete(lock)

    # Deleting Locks for Consumption Roles
    consumption_roles = session.query(ConsumptionRole).all()
    for role in consumption_roles:
        lock = session.query(ResourceLock).get((role.consumptionRoleUri, ConsumptionRole.__tablename__))
        if lock:
            session.delete(lock)
    session.commit()

    # Drop Columns
    op.drop_column('resource_lock', 'resourceType')
    op.drop_column('resource_lock', 'acquiredByType')

    # Rename Columns
    op.alter_column(
        'resource_lock',
        'resourceUri',
        nullable=False,
        new_column_name='datasetUri',
        existing_type=String,
        primary_key=True,
    )
    op.alter_column(
        'resource_lock',
        'acquiredByUri',
        nullable=True,
        new_column_name='acquiredBy',
        existing_type=String,
    )

    # Rename Table to Dataset Lock
    op.rename_table('resource_lock', 'dataset_lock')

    # Add Foregin Key
    op.create_foreign_key('dataset_lock_datasetUri_fkey', 'dataset_lock', 'dataset', ['datasetUri'], ['datasetUri'])

    # ### end Alembic commands ###
